// Generated by CoffeeScript 1.7.1
(function() {
  var DBFParser, QuotedDBFParser, chinese, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  chinese = require('toolkit/iconv');

  utils = require('../utils');

  DBFParser = require('./parser');

  QuotedDBFParser = (function(_super) {
    __extends(QuotedDBFParser, _super);

    function QuotedDBFParser(buffer, mask, type) {
      this.buffer = buffer;
      this.mask = mask;
      this.parseField = __bind(this.parseField, this);
      this.parseRecord = __bind(this.parseRecord, this);
      this.parseHeader = __bind(this.parseHeader, this);
      this.parse = __bind(this.parse, this);
      this.marketTool = require('../market/' + type);
    }

    QuotedDBFParser.prototype.parse = function() {
      var buffer, loc, records, sequenceNumber;
      this.parseHeader();
      sequenceNumber = 0;
      loc = this.header.start;
      records = [];
      buffer = this.buffer;
      while (loc < (this.header.start + this.header.numberOfRecords * this.header.recordLength) && loc < buffer.length) {
        if ((mask.slice(loc, loc += this.header.recordLength)).exist() || sequenceNumber === 0) {
          records.push(this.parseRecord(++sequenceNumber, buffer.slice(loc - this.header.recordLength, loc)));
        }
      }
      return {
        time: this.marketTool.getTimestamp(records.shift()),
        name: this.marketTool.marketName,
        records: records
      };
    };

    QuotedDBFParser.prototype.parseHeader = function() {
      QuotedDBFParser.__super__.parseHeader.call(this);
      return this.header.fields = this.marketTool.resetHeaders(this.header.fields);
    };

    QuotedDBFParser.prototype.parseRecord = function(sequenceNumber, buffer) {
      var record;
      record = QuotedDBFParser.__super__.parseRecord.call(this, sequenceNumber, buffer);
      record['@isIndex'] = this.marketTool.isIndex(record);
      record.ZQDM = record.ZQDM.toString('ascii').replace(/(^0+|\s+$)/, '');
      record.ZQJC = chinese.toASCII(chinese.convert(record.ZQJC)).replace(/\s+/g, ' ').replace(/([^a-zA-Z0-9])\s([^a-zA-Z0-9])/g, '$1$2').trim();
      if (record.ZQJC.length === 0) {
        record.ZQJC = record.ZQDM;
      }
      if (this.marketTool.transCharset) {
        return this.marketTool.transCharset(record);
      }
      return record;
    };

    QuotedDBFParser.prototype.parseField = function(field, buffer) {
      var value;
      if (!field.raw) {
        value = +(buffer.toString('ascii'));
      } else {
        value = buffer;
      }
      return value;
    };

    return QuotedDBFParser;

  })(DBFParser);

  module.exports = QuotedDBFParser;

}).call(this);
