// Generated by CoffeeScript 1.7.1
(function() {
  var DBFParser, Header,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Header = require('./header');

  DBFParser = (function() {
    function DBFParser(buffer) {
      this.buffer = buffer;
      this.parseField = __bind(this.parseField, this);
      this.parseRecord = __bind(this.parseRecord, this);
      this.parseHeader = __bind(this.parseHeader, this);
      this.parse = __bind(this.parse, this);
    }

    DBFParser.prototype.parse = function() {
      var buffer, loc, records, sequenceNumber;
      this.parseHeader();
      sequenceNumber = 0;
      loc = this.header.start;
      records = [];
      buffer = this.buffer;
      while (loc < (this.header.start + this.header.numberOfRecords * this.header.recordLength) && loc < buffer.length) {
        records.push(this.parseRecord(++sequenceNumber, buffer.slice(loc, loc += this.header.recordLength)));
      }
      return records;
    };

    DBFParser.prototype.parseHeader = function() {
      this.header = new Header(this.buffer);
      return this.header.parse();
    };

    DBFParser.prototype.parseRecord = function(sequenceNumber, buffer) {
      var field, loc, record, _fn, _i, _len, _ref;
      record = {
        '@sequenceNumber': sequenceNumber,
        '@deleted': (buffer.slice(0, 1))[0] !== 32
      };
      loc = 1;
      _ref = this.header.fields;
      _fn = (function(_this) {
        return function(field) {
          return record[field.name] = _this.parseField(field, buffer.slice(loc, loc += field.length));
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        _fn(field);
      }
      return record;
    };

    DBFParser.prototype.parseField = function(field, buffer) {
      var value;
      value = (buffer.toString('utf-8')).replace(/^\x20+|\x20+$/g, '');
      if (field.type === 'N') {
        value = parseInt(value, 10);
      }
      return value;
    };

    return DBFParser;

  })();

  module.exports = DBFParser;

}).call(this);
